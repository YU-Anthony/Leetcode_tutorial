# Problem
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

```bash
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
```

For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

- I can be placed before V (5) and X (10) to make 4 and 9. 
- X can be placed before L (50) and C (100) to make 40 and 90. 
- C can be placed before D (500) and M (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer.

Example 1:
```bash
Input: s = "III"
Output: 3
Explanation: III = 3.
```

```bash
Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
```

```bash
Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
```

# Answer
一个很朴素的解法是创建一个`哈希表`，然后列举出所有的字符组合情况。

但是我们可以观察一下这个计算方法。当一个罗马数比它右边的罗马数大时，我们去这个罗马数的`正 int`, 反之，取它的`负 int`。以`MCMXCIV`为例，这个字符串代码的数字如下
```
1000, -1000, 1000, -10, 100, -1, 5
```
和为 1994

怎么样，是不是很巧妙！
```python
class Solution:
    def romanToInt(self, s: str) -> int:
        
        map = {"I": 1, "V": 5, "X": 10, "L": 50, "C": 100, "D": 500, "M": 1000}
        
        ans = 0
        for i in range(1, len(s)):
            if map[s[i - 1]] >= map[s[i]]:
                ans += map[s[i - 1]]
            else:
                ans -= map[s[i - 1]]
        ans += map[s[-1]]
        
        return ans
```

- TC: O(n)
- SC: O(1)